answer ( intersection ( river , loc_1 ( m0 ) ) )
answer (intersection(state, next_to_2(largest_one(count_1(city, state), state))))
answer (most (state, next_to_2, state))
answer ( smallest_one ( population_1 , city ) )
answer (intersection(capital, loc_2(intersection(state, next_to_2(m0)))))
answer ( highest ( intersection ( place , loc_2 ( m0 ) ) ) )
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer ( population_1 ( m0 ) )
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer ( lowest ( intersection ( place , loc_2 ( m0 ) ) ) )
answer ( intersection ( state , next_to_2 ( m0 ) ) )
answer ( intersection ( major , intersection ( city , loc_2 ( m0 ) ) ) )
answer ( most ( river , traverse_2 , state ) )
answer ( len ( intersection ( river , m0 ) ) )
answer ( intersection ( state , traverse_1 ( m0 ) ) )
answer ( intersection ( city , loc_2 ( m0 ) ) )
answer (count (intersection (state, next_to_2(major_river))))
answer (intersection(river, loc_2(m0)))
answer ( smallest_one ( area_1 , state ) )
answer ( state_with ( highest ( peak ) ) )
answer (count (distinct (loc_1 (intersection (state, loc_2 (city_name("m0")))))))
intersection(river, loc_2(m0))
answer ( largest ( intersection ( state , loc_2 ( m0 ) ) ) )
answer ( population_1 ( m0 ) )
answer ( intersection ( state , next_to_2 ( m0 ) ) )
answer ( largest ( intersection ( city , loc_2 ( m0 ) ) ) )
answer ( len ( shortest ( intersection ( river , loc_2 ( m0 ) ) ) ) )
answer ( intersection ( major , intersection ( city , loc_2 ( m0 ) ) ) )
answer ( count ( intersection ( river , loc_1 ( m0 ) ) ) )
answer ( largest ( intersection ( city , loc_2 ( m0 ) ) ) )
answer ( population_1 ( largest_one ( city , intersection ( loc_1 ( usa ) , population_1 ) ) ) )
answer ( intersection ( state , loc_1 ( m0 ) ) )
answer ( intersection ( capital , loc_2 ( m0 ) ) )
answer (lowest (intersection (place, loc_2(state))))
answer ( largest ( capital ) )
answer ( intersection ( state , next_to_2 ( m0 ) ) )
answer ( population_1 ( m0 ) )
answer (intersection (major, intersection (city, loc_2 (smallest (intersection (state, loc_2 (m0)))))))
answer ( longest ( intersection ( river , traverse_2 ( intersection ( state , next_to_2 ( next_to_2 ( largest_one ( count_1 ( next_to_2 ( state ) ) , state ) ) ) ) ) ) ) )
answer ( population_1 ( m0 ) )
