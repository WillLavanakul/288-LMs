answer ( intersection ( river , through_1 ( m0 ) ) )
answer (intersection(state, next_to_2(largest_one(num_major_cities_1, state))))
intersection (state, next_to_2(largest_one(count(next_to_2, state), state)))
answer ( smallest_one ( population_1 , city ) )
answer (intersection (capital, loc_2(intersection(state, next_to_2(m0)))))
answer ( highest ( intersection ( place , loc_2 ( m0 ) ) ) )
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer ( population_1 ( m0 ) )
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer lowest intersection place loc_2 m0
answer ( intersection ( state , next_to_2 ( m0 ) ) )
answer ( intersection ( major , intersection ( city , loc_2 ( m0 ) ) ) )
answer ( most ( river , traverse_2 , state ) )
answer ( len ( intersection ( river , m0 ) ) )
answer (intersection state traverse_1 m0)
answer ( intersection ( city , loc_2 ( m0 ) ) )
answer (count (intersection (state, next_to_2 (major_river)) ))
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer ( smallest ( state_by_area ) )
answer ( highest ( peak_1 , state ) )
answer ( count ( intersection ( state , loc_2 ( city_name ( m0 ) ) ) ) )
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer ( largest ( intersection ( state , loc_2 ( m0 ) ) ) )
answer ( population_1 ( m0 ) )
answer ( intersection ( state , next_to_2 ( m0 ) ) )
answer ( largest ( intersection ( city , loc_2 ( m0 ) ) ) )
answer ( len ( shortest ( intersection ( river , loc_2 ( m0 ) ) ) ) )
answer ( intersection ( major , intersection ( city , loc_2 ( m0 ) ) ) )
answer ( count ( intersection ( river , loc_2 ( m0 ) ) ) )
answer ( largest ( intersection ( city , loc_2 ( m0 ) ) ) )
answer ( population_1 ( largest ( intersection ( city , loc_1 ( usa ) ) ) ) )
answer ( intersection ( state , capital_2 ( m0 ) ) )
answer ( intersection ( capital , loc_2 ( m0 ) ) )
answer ( smallest_one ( elevation_1 , state ) )
answer ( largest ( capital ) )
answer (intersection(state, next_to_2(m0)))
answer ( population_1 ( m0 ) )
answer (intersection (major, intersection (city, loc_2 (smallest (intersection (state, loc_2 (m0)))))))
longest ( intersection ( river , traverse_1 ( intersection ( state , next_to_2 ( intersection ( state , next_to_2 ( most ( border_2 ( state ) ) ) ) ) ) ) ) )
answer ( population_1 ( m0 ) )
